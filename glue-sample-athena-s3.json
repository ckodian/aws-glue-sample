{
  "QueryLanguage": "JSONata",
  "Comment": "A description of my state machine",
  "StartAt": "Start Categories Job",
  "States": {
    "Start Categories Job": {
      "Type": "Task",
      "Resource": "arn:aws:states:::glue:startJobRun.sync",
      "Arguments": {
        "JobName": "bigw-categories-transform-uat"
      },
      "Next": "Start Categories Crawler"
    },
    "Start Categories Crawler": {
      "Type": "Task",
      "Next": "WaitForCrawlerStae",
      "Arguments": {
        "Name": "categories_crawler"
      },
      "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler.waitForTaskToken"
    },
    "WaitForCrawlerStae": {
      "Type": "Task",
      "Next": "Check Crawler status",
      "Arguments": {
        "Name": "categories_crawler"
      },
      "Resource": "arn:aws:states:::aws-sdk:glue:getCrawler"
    },
    "Check Crawler status": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Wait",
          "Condition": "{% $states.input.Crawler.State = 'RUNNING' %}"
        }
      ],
      "Default": "Start Categories Query"
    },
    "Wait": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "WaitForCrawlerStae"
    },
    "Start Categories Query": {
      "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
      "Arguments": {
        "QueryString": "select * from categories",
        "WorkGroup": "bigw_migration_uat"
      },
      "Type": "Task",
      "Next": "Get Categories Results"
    },
    "Get Categories Results": {
      "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
      "Arguments": {
        "QueryString": "select * from categories",
        "QueryExecutionId": "{% $states.input.QueryExecution.QueryExecutionId %}"
      },
      "Type": "Task",
      "Next": "Process Caategories Lambda Invoke"
    },
    "Process Caategories Lambda Invoke": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "bigw-migration-uat-categories",
        "Payload": "{% $states.input %}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true
    }
  }
}
